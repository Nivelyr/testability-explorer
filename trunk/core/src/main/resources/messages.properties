
report.title=Testability Report
report.timestamp=Report generated on: {0,date,yyyy-MM-dd hh:mm:ss}

report.explain.linkToWiki=Why is this bad?
report.explain.onLine=On line
report.explain.contribution=Contribution<br/>to class cost

report.explain.class.hardToTest=Class {0}{1}{2} is hard to test because:

##
## Hard to test due to construction of the class
##
report.explain.class.construction=It is expensive to construct an instance of the class, which will probably happen in every test
report.explain.class.construction.static_init=This static initializer will have to be run once, when the class is loaded.
report.explain.class.construction.static_init.suggest=Refactor TODO
report.explain.class.construction.static_method=Static method call in constructor
report.explain.class.construction.static_method.suggest=Refactor TODO
report.explain.class.construction.setter=This setter method may need to be called before some methods can be tested
report.explain.class.construction.setter.suggest=Refactor TODO
report.explain.class.construction.new_operator=You are creating an instance of this class
report.explain.class.construction.new_operator.suggest=Refactor TODO
report.explain.class.construction.complexity=This constructor has a high cyclomatic complexity
report.explain.class.construction.complexity.suggest=Refactor TODO
#
#report.explain.class.staticInit=Static initializers must be run:
#report.explain.class.staticInit.variable=a static member variable {0} is initialized to a value that is complex to evaluate.
#report.explain.class.staticInit.suggest=Suggestion: these static members are complex. Instantiate the values outside this class, and pass them as parameters to the constructor.
#
#report.explain.class.constructor=The constructor does work:
#report.explain.class.constructor.methodExec=in the constructor, {0} is executed, which has a high complexity.
#report.explain.class.constructor.suggest=Suggestion: tests will have to execute this code to create an instance. Do this work outside the class, and pass the needed state as a parameter to the constructor. If this is impossible, at least move this code to an initialization method.

##
## Hard to test due to non-mockable collaborators
##
report.explain.class.collaborators=Some collaborators cannot be mocked

report.explain.class.collaborators.static_method=Static method calls:
#report.explain.class.staticMethod.method={0} is called, which has {1} complexity and {2} global cost.
report.explain.class.collaborators.static_method.suggest=Suggestion: since these static methods are complicated, we want to mock them out in the unit test. Refactor the methods to be non-static, and pass the object holding them to the constructor.

report.explain.class.collaborators.new_operator=Instances created with <tt>new</tt>:
#report.explain.class.newOp.new={class} is constructed, then
#report.explain.class.newOp.methodCalled=on line {0}, {1} is called on it, which has a {2} complexity.
report.explain.class.collaborators.new_operator.suggest=Suggestion: add constructor parameters for {0} so that a unit test may substitute a different implementation that costs less.
#
##
## Hard to test because of direct costs
##
#report.explain.class.directCost=The code itself is complex
#report.explain.class.directCost.complexMethod=Method {0} has high complexity.
#report.explain.class.directCost.suggest=Suggestion: refactor the method by breaking the complex portions into several smaller methods.
#
#
##
## Makes other code hard to test
##
#report.explain.class.impactOnOthers=This class may make it hard to test other code that uses it because:
#report.explain.class.staticVars=Static variables need to be set to the correct state
#
report.explain.class.benefits=If these changes were made, the cost of testing this class would be reduced by {0}{1,number,##%}{2}.
